rules = [
  Disable
  DisableSyntax
  LeakingImplicitClassVal
  MissingFinal
  NoAutoTupling
  NoValInForComprehension
  ProcedureSyntax
  RemoveUnused
  SortImports
]

Disable.symbols = [
  {
    regex = "^\\Qscala/math/Big\\E.*$"
    message = "scala arbitrary precision numbers are broken: https://github.com/scala/bug/issues/9670"
  }
  {
    regex = "^\\Qjava/net/URL#\\E.*$"
    message = "URL talks to the network for equality, prefer URI"
  }
  {
    regex = {
      includes = [
        # overrides not fully implemented: https://github.com/scalacenter/scalafix/pull/634
        "^.*\\Q#equals().\\E$"
        "^.*\\Q#hashCode().\\E$"
        "^.*\\Q#toString().\\E$" # doesn't catch string interpolators...
        # more to add here...
      ]
    }
    message = "prefer cats.{kernel.Eq, kernel.Hash, Show, etc}"
  }
  {
    symbol = "scala/Enumeration"
    message = "prefer a sealed abstract class"
  }
  {
    regex = {
      includes = [
        "^\\Qscala/util/Either.LeftProjection#get().\\E$"
        "^\\Qscala/util/Either.RightProjection#get().\\E$"
        "^\\Qscala/util/Try#get().\\E$"
        "^\\Qscala/Option#get().\\E$"
        "^\\Qscala/collection/IterableLike#head().\\E$"
      ]
    }
    message = "not a total function"
  }
]

Disable.ifSynthetic = [
  "java/io/Serializable"
  "scala/Any"
  "scala/Product"

  # when upstream broke noImplicitConversion and we don't agree that their
  # implicits are worth the mental burden.
  "scala/Option.option2Iterable"
  "scala/Predef.any2stringadd"

  # I don't understand why these are synthetic
  # https://github.com/scalacenter/scalafix/issues/703
  {
    regex = {
      includes = [
        "^\\Qscala/collection/MapLike#apply().\\E$"
        "^\\Qscala/collection/LinearSeqOptimized#apply().\\E$"
      ]
    }
    message = "not a total function"
  }
]

Disable.unlessInside = [
  {
    safeBlocks = [
      "cats/effect/IO"
      "cats/effect/Sync.delay"
      "monix/eval/Task"
      "cats/ApplicativeError.handleError"
      "cats/ApplicativeError.raiseError"
      "cats/syntax/ApplicativeErrorOps.handleError"
      "cats/syntax/ApplicativeErrorOps.recover"
      "zio/IO"
      "zio/Task"
      "zio/ZIO"
      "zio/ZIO_E_Throwable.effect"
      "zio/ZIOFunctions.effectAsync"
      "zio/ZIOFunctions.effectTotal"
      "zio/ZIOFunctions.effectTotalWith"
      "zio/ZIOFunctions.fail"
      "zio/ZIOFunctions.halt"
    ]
    symbols = [
      {
        # If something is referentially transparent but not total, instead of
        # adding to this excludes list, add it to the includes list of the
        # cats.syntax.EitherObjectOps.catchNonFatal safeBlock.
        regex = {
          includes = [
            "^\\Qjava/net/InetAddress#getByAddress().\\E$"
            "^\\Qjava/net/InetAddress#getByName(\\E.*$"
            "^\\Qjava/net/InetSocketAddress#<init>().\\E$"
            "^\\Qjava/net/InetSocketAddress#<init>(+2).\\E$"
          ]
          excludes = [
          ]
        }
        message = "Method is sideeffectful, must be called from Task/IO/ZIO"
      }
    ]
  }
  {
    safeBlocks = [
      "cats/syntax/EitherObjectOps.catchNonFatal"
      "cats/data/Validated.catchNonFatal"
      "cats/ApplicativeError.catchNonFatal"
      "cats/effect/IO"
      "cats/effect/Sync.delay"
      "monix/eval/Task"
      "zio/IO"
      "zio/Task"
      "zio/ZIO"
      "zio/ZIO_E_Throwable.effect"
    ]
    symbols = [
      {
        regex = {
          includes = [
            "^\\Qjava/net/URLEncoder#\\E.*$"
            "^\\Qjava/net/URLDecoder#\\E.*$"
            "^\\Qjava/net/InetAddress#getByAddress(+1).\\E$"
            "^\\Qjava/net/InetSocketAddress#<init>(+1).\\E$"
            "^\\Qjava/net/InetSocketAddress#createUnresolved().\\E$"
          ]
          excludes = [
          ]
        }
        message = "Deterministic method is not total, must be called via Either.catchNonFatal, etc."
      }
    ]
  }
]

DisableSyntax {
  noAsInstanceOf = true
  noFinalize = true
  noImplicitConversion = true
  noImplicitObject = true // https://stackoverflow.com/questions/20380800/scala-implicits-resolution-mechanism-is-declaration-order-dependent#comment31809401_20381535
  noIsInstanceOf = true
  noNulls = true
  noReturns = true
  noSemicolons = true
  noTabs = true
  noThrows = true
  noUniversalEquality = true
  noValPatterns = true
  noVars = true
  noWhileLoops = true
  noXml = true
}

# IntelliJ IDEA's order in order not to fight each other
SortImports.blocks = [
  "java."
  "*"
  "scala."
]
